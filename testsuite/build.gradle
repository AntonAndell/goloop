import java.util.concurrent.TimeUnit

group 'foundation.icon'
version '0.9'

allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}

subprojects {
    java {
        sourceCompatibility = JavaVersion.VERSION_1_10
        targetCompatibility = JavaVersion.VERSION_1_10
    }

    sourceSets {
        main.java.srcDirs = ['src/java']
        test.java.srcDirs = ['test/java']
    }
}

sourceSets.test.java.srcDirs = ["java"]

dependencies {
    implementation "org.bouncycastle:bcprov-jdk15on:1.60"
    implementation "org.msgpack:jackson-dataformat-msgpack:0.8.16"
    implementation "org.java-websocket:Java-WebSocket:1.4.0"
    implementation project(':sdk')
    implementation project(':rt')
    implementation project(':tooling')
    implementation project(':samples')
    testImplementation "org.junit.jupiter:junit-jupiter:5.4.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"
}

compileTestJava {
    options.warnings = true
    options.deprecation = true
}

class ChainTest extends Test {
    String configFile = "./data/config.json"
    String logFile = "./chain.log"
    String envFile = "./data/env.properties"
    String chainDir = ".chain/normal"
    String gsFile = null
    String gsDir = null
    Process process = null

    void startServer() {
        List<String> commands = new LinkedList<String>()
        commands.add("../bin/gochain")
        commands.add("--config")
        commands.add(configFile)
        commands.add("--chain_dir")
        commands.add(chainDir)
        if (gsFile != null) {
            commands.add("--genesis_storage")
            commands.add(gsFile)
        } else if (gsDir != null) {
            commands.add("--genesis")
            commands.add(gsDir)
        }
        def logLevel = System.getProperty("LOG_LEVEL")
        if (logLevel != null && logLevel.length() != 0) {
            commands.add("--log_level=" + logLevel)
        }

        Runtime.getRuntime().exec("rm -rf " + chainDir)

        ProcessBuilder pb = new ProcessBuilder(commands)

        // adding PYTHONPATH for using pyee directly.
        def env = pb.environment()
        env.put("PYTHONPATH", "../pyee")

        // set working directory
        pb.directory(new File("."))

        File log_file = new File(logFile)
        pb.redirectError(log_file)
        pb.redirectOutput(log_file)

        process = pb.start()

        // Hook shutdown for kill the process for sure
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            void run() {
                stopServer()
            }
        }))
        systemProperty("CHAIN_ENV", envFile)
    }

    void startDocker() {
        List<String> commands = new LinkedList<String>()
        commands.add("docker")
        commands.add("run")
        commands.add("-dit")
        commands.add("-v")
        commands.add(getWorkingDir().toString() + ":" + "/testsuite")
        commands.add("--env-file")
        commands.add("data/dockerenv")
        commands.add("--name")
        commands.add("gochain-docker")
        commands.add("goloop/gochain")
        process = commands.execute()
    }

    @TaskAction
    @Override
    void executeTests() {
        def noServer = System.getProperty("NO_SERVER")
        if (noServer == null || noServer != "true") {
            logging.println("STARTING Stand-alone server")
            logging.println("Config: ${configFile}")
            logging.println("Log   : ${logFile}")
            logging.println("Env   : ${envFile}")
            if (gsFile != null) {
                logging.println("GSFile: ${gsFile}")
            }
            startServer()
        } else {
            def useDocker = System.getProperty("USE_DOCKER")
            if (useDocker != null && useDocker == "true") {
                logging.println("STARTING docker container")
                startDocker()
            }
            systemProperty("CHAIN_ENV", System.getProperty("CHAIN_ENV"))
        }
        try {
            super.executeTests()
        } finally {
            stopServer()
            stopDocker()
        }
    }

    synchronized void stopServer() {
        if (process != null && process.isAlive()) {
            logging.println("STOPPING Stand-alone server")
            process.destroy()
            process.waitFor(1, TimeUnit.SECONDS)
            process = null
        }
    }

    synchronized void stopDocker() {
        if (process != null && process.exitValue() == 0) {
            logging.println("STOPPING docker container")
            ["docker", "stop", "gochain-docker"].execute().waitFor()
            ["docker", "rm", "gochain-docker"].execute().waitFor()
            process = null
        }
    }
}

task testGovernance(type: ChainTest, overwrite: true) {
    useJUnitPlatform {
        includeTags "governance"
    }
    def audit = System.getProperty("AUDIT")
    if (audit == "true") {
        gsDir = "./data/genesisStorage/genesis_audit.json"
        envFile = "./data/govEnvAudit.properties"
        configFile = "./data/govConfigAudit.json"
        logFile = "./gov_audit.log"
        chainDir = ".chain/governance_audit"
    }
    else {
        gsDir = "./data/genesisStorage/genesis_normal.json"
        envFile = "./data/govEnv.properties"
        configFile = "./data/govConfig.json"
        logFile = "./gov.log"
        chainDir = ".chain/governance"
    }

    dependsOn cleanTest
    testLogging.showStandardStreams = true
}

task testNormal(type: ChainTest, overwrite: true) {
    useJUnitPlatform {
        includeTags "normal"
    }
    configFile = "./data/config.json"
    chainDir = ".chain/normal"
    logFile = "./normal.log"
    envFile = "./data/env.properties"

    dependsOn cleanTest
    testLogging.showStandardStreams = true

    def forks = System.getProperty("FORKS")
    if (forks != null && forks.isInteger()) {
        maxParallelForks = Integer.valueOf(forks)
    }
}

task testJavaScore(type: ChainTest, overwrite: true) {
    useJUnitPlatform {
        includeTags "javaScore"
    }
    gsDir = "./data/genesisStorage/genesis_normal.json"
    envFile = "./data/govEnv.properties"
    configFile = "./data/javaConfig.json"
    logFile = "./javaee.log"
    chainDir = ".chain/javaee"

    dependsOn cleanTest
    testLogging.showStandardStreams = true
}

task test(overwrite: true) {
    dependsOn 'testNormal', 'testGovernance'
}
